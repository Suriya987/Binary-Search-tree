Implement the BSTIterator class that represents an iterator over the in-order traversal of a binary search tree (BST):

BSTIterator(TreeNode root) Initializes an object of the BSTIterator class. The root of the BST is given as part of the constructor. The pointer should be initialized to a non-existent number smaller than any element in the BST.
boolean hasNext() Returns true if there exists a number in the traversal to the right of the pointer, otherwise returns false.
int next() Moves the pointer to the right, then returns the number at the pointer.
Notice that by initializing the pointer to a non-existent smallest number, the first call to next() will return the smallest element in the BST.

You may assume that next() calls will always be valid. That is, there will be at least a next number in the in-order traversal when next() is called.

 

Example 1:


Input
["BSTIterator", "next", "next", "hasNext", "next", "hasNext", "next", "hasNext", "next", "hasNext"]
[[[7, 3, 15, null, null, 9, 20]], [], [], [], [], [], [], [], [], []]
Output
[null, 3, 7, true, 9, true, 15, true, 20, false]

Explanation
BSTIterator bSTIterator = new BSTIterator([7, 3, 15, null, null, 9, 20]);
bSTIterator.next();    // return 3
bSTIterator.next();    // return 7
bSTIterator.hasNext(); // return True
bSTIterator.next();    // return 9
bSTIterator.hasNext(); // return True
bSTIterator.next();    // return 15
bSTIterator.hasNext(); // return True
bSTIterator.next();    // return 20
bSTIterator.hasNext(); // return False


Soln:

Time complexity : O(1) 
    How?  we adding all the nodes in the stack so it O(1)
  becoz , we are not end up adding all the values in the single attempt , some time we add 3 , and some time we add 2 so , it near about O(1)


  /*
  Time Complexity
BSTIterator(TreeNode* root):
In the worst case, pushAllNodes will traverse all the leftmost nodes of the tree, which could be O(H), where H is the height of the tree. In the worst case of a skewed tree, H could be O(N), where N is the number of nodes.
next():
Popping from the stack is O(1).
pushAllNodes(temp->right) can take O(H) in the worst case, but amortized analysis shows that the total time for all next() calls is O(N). Each node is pushed and poped only once. So the average time complexity of next is O(1).
hasNext():
Checking if the stack is empty is O(1).
pushAllNodes(TreeNode* root):
Traversing the leftmost nodes is O(H) in the worst case.
Amortized Analysis of next()

Although pushAllNodes(temp->right) can take O(H) in the worst case, we can use amortized analysis to show that the average time complexity of next() is O(1).

Each node is pushed onto the stack exactly once.
Each node is popped from the stack exactly once.
Therefore, the total number of push and pop operations is O(N).
Since we perform N next() operations, the average time complexity of each next() operation is O(N) / N = O(1).
*/


Space complexity : O(H)

class BSTIterator {

    //these are the methods that we need to implement , we dont care about which one will called

    //we need stack to do operations 

private:  
   stack<TreeNode*> st;
public:
    BSTIterator(TreeNode* root) {
         pushAllNodes(root);   
    }
    
    int next() {
        // pick the last added element
         TreeNode* temp=st.top();
         st.pop();
         //push all the nodes if temp has its right
         pushAllNodes(temp->right);
         return temp->val;
         
    }
    
    bool hasNext() {
         if(!st.empty())  return true;
         return false;
    }
private:
   void pushAllNodes(TreeNode* root)
   {
       while(root)
       {
          st.push(root);
          root=root->left;
       }
   }
};
