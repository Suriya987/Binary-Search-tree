Given the root of a binary search tree, and an integer k, return the kth smallest value (1-indexed) of all the values of the nodes in the tree.

Input: root = [3,1,4,null,2], k = 1
Output: 1

Input: root = [5,3,6,2,4,null,null,1], k = 3
Output: 3

Soln:

Time complexity : O(Height of the tree)+O(NLogN)  -> for sorting 
Space complexity : O(N)


class Solution {
public:
void helper(TreeNode* root,vector<int>&val)
{
    if(root==NULL)
     return;
    
    val.push_back(root->val);
    helper(root->left,val);
    helper(root->right,val);
}
public:
    int kthSmallest(TreeNode* root, int k) {
        vector<int> val;

        helper(root,val);
        sort(val.begin(),val.end());
         return val[k-1];
        /*
        if(root->left)
        helper(root,val);
        else   
         helper(root,val);
        sort(val.begin(),val.end());
        for(int i=0;i<val.size();i++)
        cout<<val[i]<<" ";
        return val[k-1];*/
    }
};

Better approach:

Time complexity : O(N)
Space complexity : O(N)
class Solution {  
public:
 void inOrder(TreeNode* root,vector<int>&val)
 {
      if(root==NULL)
       return;

      inOrder(root->left,val);
      val.push_back(root->val);
      inOrder(root->right,val);
 }   
public:
    int kthSmallest(TreeNode* root, int k) {
        vector<int> val;
       inOrder(root,val);
         return val[k-1];
    }
};

Optimal :

Time complexity : O(Height of the tree)
Space complexity : O(1)

class Solution {  
public :
  void  inOrders(TreeNode* root,int &k,int &ans)
  {
     if(ans!=INT_MIN)  return;
      if(root==NULL)  return;

      inOrders(root->left,k,ans);
      if(k!=0 && ans==INT_MIN)
      {
      k--;
      if(k==0)  {
        ans=root->val;
        return;
      }
    
      inOrders(root->right,k,ans);

      }
  }

public:
    int kthSmallest(TreeNode* root, int k) {
      int ans=INT_MIN;
       inOrders(root,k,ans);
       return ans;
    }
};
