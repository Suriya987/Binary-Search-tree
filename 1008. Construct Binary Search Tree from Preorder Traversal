Given an array of integers preorder, which represents the preorder traversal of a BST (i.e., binary search tree), construct the tree and return its root.

It is guaranteed that there is always possible to find a binary search tree with the given requirements for the given test cases.

A binary search tree is a binary tree where for every node, any descendant of Node.left has a value strictly less than Node.val, and any descendant of Node.right has a value strictly greater than Node.val.

A preorder traversal of a binary tree displays the value of the node first, then traverses Node.left, then traverses Node.right.

 

Example 1:


Input: preorder = [8,5,1,7,10,12]
Output: [8,5,10,1,7,null,12]
Example 2:

Input: preorder = [1,3]
Output: [1,null,3]


Soln:

Time complexity : O(3N)  each node will go left and right call
Space complexity : O(1)  and will take recursive stack space

class Solution {
public:
    TreeNode* find(vector<int>& A,int &i,int bound)
    {
         if(i==A.size()  || A[i]>bound)  return NULL;

         TreeNode* root=new TreeNode(A[i++]);
            
            cout<<"left call , i "<<i<<"  "<<root->val<<"  "<<endl;
         root->left=find(A,i,root->val);
          cout<<"right call , i "<<i<<" "<<bound<<endl;
         root->right=find(A,i,bound);    // for the 5th val i not changed it still the 3
         return root;                    //do dry run for understanding
    }
public:
    TreeNode* bstFromPreorder(vector<int>& preorder) {
        
            int n=preorder.size();
            int i=0;
            return find(preorder,i,INT_MAX);
           // return   constructTree(preorder,0,n-1);
    }
};
