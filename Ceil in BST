Given a BST and a number X, find Ceil of X.
Note: Ceil(X) is a number that is either equal to X or is immediately greater than X.

If Ceil could not be found, return -1.

Input: root = [5, 1, 7, N, 2, N, N, N, 3], X = 3
      5
    /   \
   1     7
    \
     2 
      \
       3
Output: 3
Explanation: We find 3 in BST, so ceil of 3 is 3.
Example 2:

Input: root = [10, 5, 11, 4, 7, N, N, N, N, N, 8], X = 6
     10
    /  \
   5    11
  / \ 
 4   7
      \
       8
Output: 7
Explanation: We find 7 in BST, so ceil of 6 is 7.



Soln:

cnt helper(Node* root, int input , int &num)
{
    if(root==NULL)
     return -1;
     //check current val is equal to input
     if(root->data==input)
      return input;
      
     //look for immediate bigger val
     if(root->data > input)
     {
         //if num is already holding a val 
          if(num!=-1)
          {
              //then it is holding the value , we have to look for 
              //whether current bigger val is smaller than holding val
              if(num > root->data)
               num=root->data;
          }
          else
           num=root->data;
     }
     
     
     int val=-1;
      if(root->data < input)
        val=helper(root->right,input,num);
      else
        val=helper(root->left,input,num);
        
  return val;
        
}
int findCeil(Node* root, int input) {
    if (root == NULL) return -1;
    int num=-1;
    int result=helper(root,input,num);
     if(result==input)
       return result;
     if(num!=-1) return num;
     
     return -1;
}
