Soln:
Time complexity : O(N)
Space complexity : O(1)

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {

public:
    bool helper(TreeNode* root , TreeNode* minNode,TreeNode* maxNode)
    {
        if(root==NULL)  return true;
        if((maxNode && root->val >= maxNode->val ) || (minNode && root->val <=minNode->val)) return false;
        bool left = helper(root->left,minNode,root);
        bool right=helper(root->right,root,maxNode);

        return (left && right);
    }
/*public:
    void helper(TreeNode* root,bool &result)
    {
        if(result==false)  return;
           
           int val1=root->val;
           int val2=INT_MIN;
           if(root->left)
           val2=root->left->val;
        //left   root->left->val > root->val
          if(root->left!=NULL &&  val1<=val2 )
          {
            result=false;
          }
          if(result && root->left!=NULL)
           helper(root->left,result);
          
            val1=root->val;
            val2=INT_MAX;
            if(root->right)
            val2=root->right->val;
          //right                 root->right->val < root->val
           if(result==true && root->right!=NULL && val1>=val2)
           {
            result=false;
           }
           if(result && root->right!=NULL)
           helper(root->right,result);

    }*/
public:
    bool isValidBST(TreeNode* root) {
          //bool result=true;
          // long minVal=INT_MIN;
           //long maxVal=INT_MAX;
          return helper(root,nullptr,nullptr);
          //return result;
    }
};
