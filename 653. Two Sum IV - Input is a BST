Given the root of a binary search tree and an integer k, return true if there exist two elements in the BST such that their sum is equal to k, or false otherwise.

 

Example 1:


Input: root = [5,3,6,2,4,null,7], k = 9
Output: true
Example 2:


Input: root = [5,3,6,2,4,null,7], k = 28
Output: false


Soln:   { Refer Note for dry run }

Time complexity : O(N)
Space compelxity : O(2H)

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

 class BSTIterator
 {
      stack<TreeNode*> st;
      bool reverse=true;
public:
      BSTIterator(TreeNode* root,bool isReverse)
      {
           reverse=isReverse;    //this will decide the entry of the node into stack or which direction we need to go .
           pushAll(root);
         //  reverse=isReverse;
      }
       
      private:
         void pushAll(TreeNode* root)
         {
         //   cout<<" reverse "<<reverse<<"  ";
            for(;root!=NULL;)
            {
              //  cout<<root->val<<" ";
                st.push(root);
                //decide whether to go leftwards or rightwards
                if(reverse==false)
                  root=root->left;
                else
                  root=root->right;
            }
         }

public:
   int next()
   {
       //we are having some nodes in the stack use them to find 
         TreeNode* tmp= st.top();
         st.pop();

         //if there any right or left nodes are associated with it pls add into the stack
         if(reverse==false)
         {
              pushAll(tmp->right);
         }
         else
           pushAll(tmp->left);

           return tmp->val;
   }
 };
class Solution {
public:
    bool findTarget(TreeNode* root, int k) {
         
         //check if root is null
         if(root==NULL)
         return false;

         //create instance of the BST class
        
       BSTIterator left(root,false);    //order -> left node right
   
      BSTIterator right(root,true);   //order ->  right node left

           int i=left.next();
           int j=right.next(); 
         cout<<" i"<<i<<" "<<"j "<<j<<endl; 
           while(i<j)
           {
            if(i+j == k)  return true;
           // cout<<" i"<<i<<" "<<"j "<<j<<endl; 
            if(i+j < k) 
             i=left.next();
            else
              j=right.next();
           }
           return false;

         
    }
};
