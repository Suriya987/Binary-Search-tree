You are given a BST(Binary Search Tree) with n number of nodes and value x. your task is to find the greatest value node of the BST which is smaller than or equal to x.
Note: when x is smaller than the smallest node of BST then returns -1.

Examples:

Input:
n = 7               2
                     \
                      81
                    /     \
                 42       87
                   \       \
                    66      90
                   /
                 45
x = 87
Output: 87
Explanation: 87 is present in tree so floor will be 87.
Input:
n = 4                     6
                           \
                            8
                          /   \
                        7       9
x = 11
Output: 9
Input:
n = 4                     6
                           \
                            8
                          /   \
                        7       9
x = 5
Output: -1


Soln:

It is same as Ceil in BST only one change is needed 

class Solution{
    
int helper(Node* root, int input , int &num)
{
    if(root==NULL)
     return -1;
     //check current val is equal to input
     if(root->data==input)
      return input;
      
     //look for immediate bigger val
     if(root->data < input)  // HERE IS THE DIFF BTWN CEIL AND THI FLOOR PROBLEM
     {
         //if num is already holding a val 
          if(num!=-1)
          {
              //then it is holding the value , we have to look for 
              //whether current bigger val is smaller than holding val
              if(num < root->data)
               num=root->data;
          }
          else
           num=root->data;
     }
     
     
     int val=-1;
      if(root->data < input)
        val=helper(root->right,input,num);
      else
        val=helper(root->left,input,num);
        
  return val;
        
}

public:
    int floor(Node* root, int x) {
             if (root == NULL) return -1;
    int num=-1;
    int result=helper(root,x,num);
     if(result==x)
       return result;
     if(num!=-1) return num;
     
     return -1;
    }
};
