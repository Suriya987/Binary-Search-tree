You are given the root node of a binary search tree (BST) and a value to insert into the tree.
Return the root node of the BST after the insertion. It is guaranteed that the new value does not exist in the original BST.

Notice that there may exist multiple valid ways for the insertion, as long as the tree remains a BST after insertion. 
You can return any of them.

Soln:

Time Complexity : O(Log2N)
Space Complexity : O(1)

class Solution {

public:
    TreeNode* insertIntoBST(TreeNode* root, int val) {

           TreeNode* original = root;
             //checking root is not null
             if(root==NULL)  return new TreeNode(val);

             while(true)
             {
                if(root->val < val)
                {
                     if(root->right != NULL)  root=root->right;
                     else
                     {  //if the right is null then just append the new root and break it .
                        root->right=new TreeNode(val);
                        break;
                     }
                }
                else  //if the val is smaller than root
                {
                    if(root->left !=NULL)  root=root->left;
                    else
                    {
                        root->left=new TreeNode(val);
                        break;
                    }
                }
             }

             return original;
      }
};
