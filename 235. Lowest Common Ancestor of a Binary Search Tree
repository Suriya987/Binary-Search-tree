Given a binary search tree (BST), find the lowest common ancestor (LCA) node of two given nodes in the BST.

According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q 
as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”
Example 1:


Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8
Output: 6
Explanation: The LCA of nodes 2 and 8 is 6.
Example 2:


Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4
Output: 2
Explanation: The LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition.
Example 3:

Input: root = [2,1], p = 2, q = 1
Output: 2

Soln:

Time complexity : O(N)
Space complexity : O(1)

class Solution {    
public:
    TreeNode* Lca(TreeNode* root, TreeNode* p , TreeNode* q)
    {
        if(root==NULL)  return NULL;
        int curr=root->val;
        if(curr< p->val && curr<q->val)
        {
            return Lca(root->right,p,q);
        }
        if(curr>p->val && curr>q->val)
          return Lca(root->left,p,q);

      return root;
    }    
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
          TreeNode* res=Lca(root,p,q);
          return res;
}};

2nd approach ;

public:
    void  helper(TreeNode* root, TreeNode* p , TreeNode* q, bool isDone, TreeNode* &res)
    {
        if(isDone==true)  return;
         if(p->val < root->val && q->val < root->val)
           helper(root->left,p,q,isDone,res);
         else if(p->val > root->val && q->val > root->val)
           helper(root->right,p,q,isDone,res);
        else
          {
            isDone = true;
            res=root;
            return;
          }
  }
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
          TreeNode* res=nullptr;
          helper(root,p,q,false,res);
          return res;
        }};
 
